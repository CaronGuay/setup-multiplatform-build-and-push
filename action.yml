name: 'RSpec'
description: 'Run RSpecs'

inputs:
  registry:
    description: 'Registry to get image'
    required: false
    default: ghcr.io
  username:
    description: 'Registry login username'
    required: true
  password:
    description: 'Registry login password'
    required: true
  bundle_dockerfile_name:
    description: 'dockerfile name, used in bundle build'
    required: false
    default: Dockerfile
  test_dockerfile_name:
    description: 'dockerfile name, used in test build'
    required: false
    default: Dockerfile
  git_patoken:
    description: 'git personal access token'
    required: false
  platforms:
    description: 'platforms to build'
    required: false
    default: linux/amd64,linux/arm64
  repo_owner:
    description: 'Repo owner to push to'
    required: false
    default: codeboxxtechschool
  push_dir:
    description: 'directory to push to'
    required: true
  branch:
    description: 'branch for tag'
    required: true
  version:
    description: 'version for tag'
    required: true
  bundle_required_files:
    description: 'files that require bundle'
    required: false
  bundle_from:
    description: 'bundle from this image'
    required: true

#    push_directory: cg/customer/test
#    branch: ${{ steps.extract_branch.outputs.branch }}
#    version: latest

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # OR "2"
    - name: Get changed files
      id: changed_files
      uses: tj-actions/changed-files@v2.0.0
      with:
        files: |
          Gemfile.lock
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: "setup repo owner and tag leaf"
      shell: bash
      run: |
        echo "REPO_OWNER=${{ inputs.registry }}/${{ inputs.repo_owner }}" >> $GITHUB_ENV
        echo "TAG_LEAF=${{ inputs.branch }}:${{ inputs.version }}" >> $GITHUB_ENV
    - name: "setup repo path"
      shell: bash
      run: echo "REPO_PATH=${{ env.REPO_OWNER }}/${{ inputs.push_dir }}" >> $GITHUB_ENV
    - name: "setup bundle tag"
      shell: bash
      run: echo "BUNDLE_TAG=${{ env.REPO_PATH }}/bundle/${{ env.TAG_LEAF }}" >> $GITHUB_ENV
    - name: Inspect manifest
      shell: bash
      run: echo ::set-output name=not_exists::"$(docker manifest inspect ${{ env.BUNDLE_TAG }} > /dev/null;)"
      id: tag_manifest
    - name: "manifest tag exists?"
      shell: bash
      run: echo BUNDLE_TAG_EXISTS=${{ steps.tag_manifest.outputs.not_exists }}
    - name: "setup branch name"
      shell: bash
      run: echo "BRANCH=${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_ENV
    - name: Build and push bundle
      if: ${{ steps.changed_files.outputs.only_changed == 'true' || steps.tag_manifest.outputs.not_exists }}
      #docker manifest inspect ghcr.io/codeboxxtechschool/cg/java-dev-capy-webkit:latest >/dev/null;
      uses: docker/build-push-action@v2
      with:
        secrets: |
          GIT_PAT=${{ inputs.git_patoken }}
        file: ${{ inputs.bundle_dockerfile_name }}
        platforms: ${{ inputs.platforms }}
        build-args: |
          IMAGE_REF=${{ env.REPO_OWNER }}/${{ inputs.bundle_from }}
        push: true
        tags: |
          ${{ env.BUNDLE_TAG }}
    - name: Build and push for tests
      uses: docker/build-push-action@v2
      with:
        secrets: |
          GIT_PAT=${{ inputs.git_patoken }}
        file: ${{ inputs.test_dockerfile_name }}
        platforms: ${{ inputs.platforms }}
        build-args: |
          IMAGE_REF=${{ env.BUNDLE_TAG }}
        push: true
        tags: |
          ${{ env.REPO_PATH }}/${{ env.TAG_LEAF }}
